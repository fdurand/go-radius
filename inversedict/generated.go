// Code generated by radius-dict-gen. DO NOT EDIT.

package inversedict

import (
	"strconv"

	radius "github.com/inverse-inc/go-radius"
	"github.com/inverse-inc/go-radius/rfc2865"
)

const (
	_Inverse_VendorID = 29464
)

func _Inverse_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Inverse_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Inverse_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Inverse_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Inverse_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Inverse_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Inverse_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Inverse_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Inverse_AddVendor(p, typ, attr)
}

func _Inverse_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Inverse_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func PacketFenceRPCServer_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 1, a)
}

func PacketFenceRPCServer_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 1, a)
}

func PacketFenceRPCServer_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceRPCServer_Lookup(p)
	return
}

func PacketFenceRPCServer_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceRPCServer_LookupString(p)
	return
}

func PacketFenceRPCServer_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCServer_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCServer_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceRPCServer_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceRPCServer_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 1, a)
}

func PacketFenceRPCServer_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 1, a)
}

func PacketFenceRPCServer_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 1)
}

func PacketFenceRPCPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 2, a)
}

func PacketFenceRPCPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 2, a)
}

func PacketFenceRPCPort_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceRPCPort_Lookup(p)
	return
}

func PacketFenceRPCPort_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceRPCPort_LookupString(p)
	return
}

func PacketFenceRPCPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceRPCPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceRPCPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 2, a)
}

func PacketFenceRPCPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 2, a)
}

func PacketFenceRPCPort_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 2)
}

func PacketFenceRPCUser_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 3, a)
}

func PacketFenceRPCUser_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 3, a)
}

func PacketFenceRPCUser_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceRPCUser_Lookup(p)
	return
}

func PacketFenceRPCUser_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceRPCUser_LookupString(p)
	return
}

func PacketFenceRPCUser_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCUser_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCUser_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceRPCUser_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceRPCUser_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 3, a)
}

func PacketFenceRPCUser_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 3, a)
}

func PacketFenceRPCUser_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 3)
}

func PacketFenceRPCPass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 4, a)
}

func PacketFenceRPCPass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 4, a)
}

func PacketFenceRPCPass_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceRPCPass_Lookup(p)
	return
}

func PacketFenceRPCPass_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceRPCPass_LookupString(p)
	return
}

func PacketFenceRPCPass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCPass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCPass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceRPCPass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceRPCPass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 4, a)
}

func PacketFenceRPCPass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 4, a)
}

func PacketFenceRPCPass_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 4)
}

func PacketFenceRPCProto_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 5, a)
}

func PacketFenceRPCProto_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 5, a)
}

func PacketFenceRPCProto_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceRPCProto_Lookup(p)
	return
}

func PacketFenceRPCProto_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceRPCProto_LookupString(p)
	return
}

func PacketFenceRPCProto_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCProto_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRPCProto_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceRPCProto_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceRPCProto_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 5, a)
}

func PacketFenceRPCProto_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 5, a)
}

func PacketFenceRPCProto_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 5)
}

func PacketFenceMac_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 6, a)
}

func PacketFenceMac_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 6, a)
}

func PacketFenceMac_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceMac_Lookup(p)
	return
}

func PacketFenceMac_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceMac_LookupString(p)
	return
}

func PacketFenceMac_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceMac_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceMac_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceMac_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceMac_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 6, a)
}

func PacketFenceMac_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 6, a)
}

func PacketFenceMac_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 6)
}

func PacketFenceUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 7, a)
}

func PacketFenceUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 7, a)
}

func PacketFenceUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceUserName_Lookup(p)
	return
}

func PacketFenceUserName_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceUserName_LookupString(p)
	return
}

func PacketFenceUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 7, a)
}

func PacketFenceUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 7, a)
}

func PacketFenceUserName_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 7)
}

func PacketFenceSwitchID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 8, a)
}

func PacketFenceSwitchID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 8, a)
}

func PacketFenceSwitchID_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceSwitchID_Lookup(p)
	return
}

func PacketFenceSwitchID_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceSwitchID_LookupString(p)
	return
}

func PacketFenceSwitchID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSwitchID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSwitchID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceSwitchID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceSwitchID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 8, a)
}

func PacketFenceSwitchID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 8, a)
}

func PacketFenceSwitchID_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 8)
}

func PacketFenceSwitchMac_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 9, a)
}

func PacketFenceSwitchMac_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 9, a)
}

func PacketFenceSwitchMac_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceSwitchMac_Lookup(p)
	return
}

func PacketFenceSwitchMac_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceSwitchMac_LookupString(p)
	return
}

func PacketFenceSwitchMac_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSwitchMac_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSwitchMac_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceSwitchMac_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceSwitchMac_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 9, a)
}

func PacketFenceSwitchMac_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 9, a)
}

func PacketFenceSwitchMac_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 9)
}

func PacketFenceSwitchIPAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 10, a)
}

func PacketFenceSwitchIPAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 10, a)
}

func PacketFenceSwitchIPAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceSwitchIPAddress_Lookup(p)
	return
}

func PacketFenceSwitchIPAddress_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceSwitchIPAddress_LookupString(p)
	return
}

func PacketFenceSwitchIPAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSwitchIPAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSwitchIPAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceSwitchIPAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceSwitchIPAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 10, a)
}

func PacketFenceSwitchIPAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 10, a)
}

func PacketFenceSwitchIPAddress_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 10)
}

func PacketFenceEapType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 11, a)
}

func PacketFenceEapType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 11, a)
}

func PacketFenceEapType_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceEapType_Lookup(p)
	return
}

func PacketFenceEapType_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceEapType_LookupString(p)
	return
}

func PacketFenceEapType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceEapType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceEapType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceEapType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceEapType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 11, a)
}

func PacketFenceEapType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 11, a)
}

func PacketFenceEapType_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 11)
}

func PacketFenceConnectionType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 12, a)
}

func PacketFenceConnectionType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 12, a)
}

func PacketFenceConnectionType_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceConnectionType_Lookup(p)
	return
}

func PacketFenceConnectionType_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceConnectionType_LookupString(p)
	return
}

func PacketFenceConnectionType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceConnectionType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceConnectionType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceConnectionType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceConnectionType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 12, a)
}

func PacketFenceConnectionType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 12, a)
}

func PacketFenceConnectionType_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 12)
}

func PacketFenceSource_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 13, a)
}

func PacketFenceSource_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 13, a)
}

func PacketFenceSource_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceSource_Lookup(p)
	return
}

func PacketFenceSource_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceSource_LookupString(p)
	return
}

func PacketFenceSource_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSource_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSource_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceSource_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceSource_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 13, a)
}

func PacketFenceSource_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 13, a)
}

func PacketFenceSource_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 13)
}

func PacketFenceSSID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 14, a)
}

func PacketFenceSSID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 14, a)
}

func PacketFenceSSID_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceSSID_Lookup(p)
	return
}

func PacketFenceSSID_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceSSID_LookupString(p)
	return
}

func PacketFenceSSID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSSID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceSSID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceSSID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceSSID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 14, a)
}

func PacketFenceSSID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 14, a)
}

func PacketFenceSSID_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 14)
}

func PacketFenceIsPhone_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 15, a)
}

func PacketFenceIsPhone_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 15, a)
}

func PacketFenceIsPhone_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceIsPhone_Lookup(p)
	return
}

func PacketFenceIsPhone_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceIsPhone_LookupString(p)
	return
}

func PacketFenceIsPhone_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceIsPhone_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceIsPhone_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceIsPhone_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceIsPhone_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 15, a)
}

func PacketFenceIsPhone_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 15, a)
}

func PacketFenceIsPhone_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 15)
}

func PacketFenceAutoReg_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 16, a)
}

func PacketFenceAutoReg_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 16, a)
}

func PacketFenceAutoReg_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceAutoReg_Lookup(p)
	return
}

func PacketFenceAutoReg_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceAutoReg_LookupString(p)
	return
}

func PacketFenceAutoReg_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceAutoReg_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceAutoReg_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceAutoReg_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceAutoReg_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 16, a)
}

func PacketFenceAutoReg_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 16, a)
}

func PacketFenceAutoReg_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 16)
}

func PacketFenceRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 17, a)
}

func PacketFenceRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 17, a)
}

func PacketFenceRole_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceRole_Lookup(p)
	return
}

func PacketFenceRole_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceRole_LookupString(p)
	return
}

func PacketFenceRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 17, a)
}

func PacketFenceRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 17, a)
}

func PacketFenceRole_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 17)
}

func PacketFenceStatus_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 18, a)
}

func PacketFenceStatus_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 18, a)
}

func PacketFenceStatus_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceStatus_Lookup(p)
	return
}

func PacketFenceStatus_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceStatus_LookupString(p)
	return
}

func PacketFenceStatus_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceStatus_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceStatus_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceStatus_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceStatus_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 18, a)
}

func PacketFenceStatus_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 18, a)
}

func PacketFenceStatus_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 18)
}

func PacketFenceIfIndex_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 19, a)
}

func PacketFenceIfIndex_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 19, a)
}

func PacketFenceIfIndex_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceIfIndex_Lookup(p)
	return
}

func PacketFenceIfIndex_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceIfIndex_LookupString(p)
	return
}

func PacketFenceIfIndex_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceIfIndex_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceIfIndex_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceIfIndex_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceIfIndex_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 19, a)
}

func PacketFenceIfIndex_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 19, a)
}

func PacketFenceIfIndex_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 19)
}

func PacketFenceProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 20, a)
}

func PacketFenceProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 20, a)
}

func PacketFenceProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceProfile_Lookup(p)
	return
}

func PacketFenceProfile_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceProfile_LookupString(p)
	return
}

func PacketFenceProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 20, a)
}

func PacketFenceProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 20, a)
}

func PacketFenceProfile_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 20)
}

func PacketFenceDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 21, a)
}

func PacketFenceDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 21, a)
}

func PacketFenceDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceDomain_Lookup(p)
	return
}

func PacketFenceDomain_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceDomain_LookupString(p)
	return
}

func PacketFenceDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 21, a)
}

func PacketFenceDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 21, a)
}

func PacketFenceDomain_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 21)
}

func PacketFenceComputerName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 22, a)
}

func PacketFenceComputerName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 22, a)
}

func PacketFenceComputerName_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceComputerName_Lookup(p)
	return
}

func PacketFenceComputerName_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceComputerName_LookupString(p)
	return
}

func PacketFenceComputerName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceComputerName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceComputerName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceComputerName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceComputerName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 22, a)
}

func PacketFenceComputerName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 22, a)
}

func PacketFenceComputerName_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 22)
}

func PacketFenceHandled_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 23, a)
}

func PacketFenceHandled_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 23, a)
}

func PacketFenceHandled_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceHandled_Lookup(p)
	return
}

func PacketFenceHandled_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceHandled_LookupString(p)
	return
}

func PacketFenceHandled_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceHandled_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceHandled_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceHandled_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceHandled_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 23, a)
}

func PacketFenceHandled_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 23, a)
}

func PacketFenceHandled_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 23)
}

type PacketFenceRequestTime uint32

var PacketFenceRequestTime_Strings = map[PacketFenceRequestTime]string{}

func (a PacketFenceRequestTime) String() string {
	if str, ok := PacketFenceRequestTime_Strings[a]; ok {
		return str
	}
	return "PacketFenceRequestTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PacketFenceRequestTime_Add(p *radius.Packet, value PacketFenceRequestTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Inverse_AddVendor(p, 24, a)
}

func PacketFenceRequestTime_Get(p *radius.Packet) (value PacketFenceRequestTime) {
	value, _ = PacketFenceRequestTime_Lookup(p)
	return
}

func PacketFenceRequestTime_Gets(p *radius.Packet) (values []PacketFenceRequestTime, err error) {
	var i uint32
	for _, attr := range _Inverse_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PacketFenceRequestTime(i))
	}
	return
}

func PacketFenceRequestTime_Lookup(p *radius.Packet) (value PacketFenceRequestTime, err error) {
	a, ok := _Inverse_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PacketFenceRequestTime(i)
	return
}

func PacketFenceRequestTime_Set(p *radius.Packet, value PacketFenceRequestTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Inverse_SetVendor(p, 24, a)
}

func PacketFenceRequestTime_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 24)
}

func PacketFenceNasName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 25, a)
}

func PacketFenceNasName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 25, a)
}

func PacketFenceNasName_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceNasName_Lookup(p)
	return
}

func PacketFenceNasName_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceNasName_LookupString(p)
	return
}

func PacketFenceNasName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceNasName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceNasName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceNasName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceNasName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 25, a)
}

func PacketFenceNasName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 25, a)
}

func PacketFenceNasName_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 25)
}

func PacketFenceProxiedTo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 26, a)
}

func PacketFenceProxiedTo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 26, a)
}

func PacketFenceProxiedTo_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceProxiedTo_Lookup(p)
	return
}

func PacketFenceProxiedTo_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceProxiedTo_LookupString(p)
	return
}

func PacketFenceProxiedTo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceProxiedTo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceProxiedTo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceProxiedTo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceProxiedTo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 26, a)
}

func PacketFenceProxiedTo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 26, a)
}

func PacketFenceProxiedTo_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 26)
}

func PacketFenceAuthorizationStatus_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 27, a)
}

func PacketFenceAuthorizationStatus_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 27, a)
}

func PacketFenceAuthorizationStatus_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceAuthorizationStatus_Lookup(p)
	return
}

func PacketFenceAuthorizationStatus_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceAuthorizationStatus_LookupString(p)
	return
}

func PacketFenceAuthorizationStatus_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceAuthorizationStatus_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceAuthorizationStatus_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceAuthorizationStatus_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceAuthorizationStatus_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 27, a)
}

func PacketFenceAuthorizationStatus_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 27, a)
}

func PacketFenceAuthorizationStatus_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 27)
}

type PacketFenceTenantID uint32

var PacketFenceTenantID_Strings = map[PacketFenceTenantID]string{}

func (a PacketFenceTenantID) String() string {
	if str, ok := PacketFenceTenantID_Strings[a]; ok {
		return str
	}
	return "PacketFenceTenantID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PacketFenceTenantID_Add(p *radius.Packet, value PacketFenceTenantID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Inverse_AddVendor(p, 28, a)
}

func PacketFenceTenantID_Get(p *radius.Packet) (value PacketFenceTenantID) {
	value, _ = PacketFenceTenantID_Lookup(p)
	return
}

func PacketFenceTenantID_Gets(p *radius.Packet) (values []PacketFenceTenantID, err error) {
	var i uint32
	for _, attr := range _Inverse_GetsVendor(p, 28) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PacketFenceTenantID(i))
	}
	return
}

func PacketFenceTenantID_Lookup(p *radius.Packet) (value PacketFenceTenantID, err error) {
	a, ok := _Inverse_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PacketFenceTenantID(i)
	return
}

func PacketFenceTenantID_Set(p *radius.Packet, value PacketFenceTenantID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Inverse_SetVendor(p, 28, a)
}

func PacketFenceTenantID_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 28)
}

func PacketFenceShortName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 29, a)
}

func PacketFenceShortName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 29, a)
}

func PacketFenceShortName_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceShortName_Lookup(p)
	return
}

func PacketFenceShortName_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceShortName_LookupString(p)
	return
}

func PacketFenceShortName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceShortName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceShortName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceShortName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceShortName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 29, a)
}

func PacketFenceShortName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 29, a)
}

func PacketFenceShortName_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 29)
}

func PacketFenceProxiedFrom_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 30, a)
}

func PacketFenceProxiedFrom_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 30, a)
}

func PacketFenceProxiedFrom_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceProxiedFrom_Lookup(p)
	return
}

func PacketFenceProxiedFrom_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceProxiedFrom_LookupString(p)
	return
}

func PacketFenceProxiedFrom_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceProxiedFrom_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceProxiedFrom_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceProxiedFrom_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceProxiedFrom_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 30, a)
}

func PacketFenceProxiedFrom_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 30, a)
}

func PacketFenceProxiedFrom_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 30)
}

func PacketFenceUserNameAttribute_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 31, a)
}

func PacketFenceUserNameAttribute_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 31, a)
}

func PacketFenceUserNameAttribute_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceUserNameAttribute_Lookup(p)
	return
}

func PacketFenceUserNameAttribute_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceUserNameAttribute_LookupString(p)
	return
}

func PacketFenceUserNameAttribute_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceUserNameAttribute_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceUserNameAttribute_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceUserNameAttribute_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceUserNameAttribute_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 31, a)
}

func PacketFenceUserNameAttribute_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 31, a)
}

func PacketFenceUserNameAttribute_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 31)
}

func PacketFenceKeyBalanced_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 32, a)
}

func PacketFenceKeyBalanced_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 32, a)
}

func PacketFenceKeyBalanced_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceKeyBalanced_Lookup(p)
	return
}

func PacketFenceKeyBalanced_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceKeyBalanced_LookupString(p)
	return
}

func PacketFenceKeyBalanced_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceKeyBalanced_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceKeyBalanced_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceKeyBalanced_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceKeyBalanced_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 32, a)
}

func PacketFenceKeyBalanced_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 32, a)
}

func PacketFenceKeyBalanced_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 32)
}

func PacketFenceRadiusIP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 33, a)
}

func PacketFenceRadiusIP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 33, a)
}

func PacketFenceRadiusIP_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceRadiusIP_Lookup(p)
	return
}

func PacketFenceRadiusIP_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceRadiusIP_LookupString(p)
	return
}

func PacketFenceRadiusIP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRadiusIP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceRadiusIP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceRadiusIP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceRadiusIP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 33, a)
}

func PacketFenceRadiusIP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 33, a)
}

func PacketFenceRadiusIP_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 33)
}

func PacketFenceNTCacheHash_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 34, a)
}

func PacketFenceNTCacheHash_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 34, a)
}

func PacketFenceNTCacheHash_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceNTCacheHash_Lookup(p)
	return
}

func PacketFenceNTCacheHash_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceNTCacheHash_LookupString(p)
	return
}

func PacketFenceNTCacheHash_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceNTCacheHash_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceNTCacheHash_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceNTCacheHash_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceNTCacheHash_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 34, a)
}

func PacketFenceNTCacheHash_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 34, a)
}

func PacketFenceNTCacheHash_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 34)
}

func PacketFenceNTLMv2Only_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 35, a)
}

func PacketFenceNTLMv2Only_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 35, a)
}

func PacketFenceNTLMv2Only_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceNTLMv2Only_Lookup(p)
	return
}

func PacketFenceNTLMv2Only_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceNTLMv2Only_LookupString(p)
	return
}

func PacketFenceNTLMv2Only_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceNTLMv2Only_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceNTLMv2Only_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceNTLMv2Only_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceNTLMv2Only_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 35, a)
}

func PacketFenceNTLMv2Only_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 35, a)
}

func PacketFenceNTLMv2Only_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 35)
}

func PacketFenceOuterUser_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 36, a)
}

func PacketFenceOuterUser_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 36, a)
}

func PacketFenceOuterUser_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceOuterUser_Lookup(p)
	return
}

func PacketFenceOuterUser_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceOuterUser_LookupString(p)
	return
}

func PacketFenceOuterUser_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceOuterUser_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceOuterUser_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceOuterUser_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceOuterUser_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 36, a)
}

func PacketFenceOuterUser_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 36, a)
}

func PacketFenceOuterUser_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 36)
}

func PacketFenceUserDN_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 37, a)
}

func PacketFenceUserDN_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 37, a)
}

func PacketFenceUserDN_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceUserDN_Lookup(p)
	return
}

func PacketFenceUserDN_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceUserDN_LookupString(p)
	return
}

func PacketFenceUserDN_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceUserDN_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceUserDN_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceUserDN_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceUserDN_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 37, a)
}

func PacketFenceUserDN_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 37, a)
}

func PacketFenceUserDN_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 37)
}

func PacketFenceReplyInsert_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 38, a)
}

func PacketFenceReplyInsert_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_AddVendor(p, 38, a)
}

func PacketFenceReplyInsert_Get(p *radius.Packet) (value []byte) {
	value, _ = PacketFenceReplyInsert_Lookup(p)
	return
}

func PacketFenceReplyInsert_GetString(p *radius.Packet) (value string) {
	value, _ = PacketFenceReplyInsert_LookupString(p)
	return
}

func PacketFenceReplyInsert_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Inverse_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceReplyInsert_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Inverse_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PacketFenceReplyInsert_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Inverse_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PacketFenceReplyInsert_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Inverse_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PacketFenceReplyInsert_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 38, a)
}

func PacketFenceReplyInsert_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Inverse_SetVendor(p, 38, a)
}

func PacketFenceReplyInsert_Del(p *radius.Packet) {
	_Inverse_DelVendor(p, 38)
}
